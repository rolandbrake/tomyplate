{"version":3,"sources":["Countdown.js","App.js","serviceWorker.js","index.js","background.jpg"],"names":["Countdown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","days","hours","min","sec","_this2","interval","setInterval","date","calculateCountdown","setState","clearInterval","diff","Date","parse","toUTCString","timeLeft","Math","floor","countDown","react_default","a","createElement","className","Countdown_CounterPlate","count","name","Component","CounterPlate","value","String","length","addLeadingZeros","App","src","background","alt","src_Countdown","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yNAGMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,IAAK,GAPUX,mFAWC,IAAAY,EAAAT,KAElBA,KAAKU,SAAWC,YAAY,WAC1B,IAAMC,EAAOH,EAAKI,qBAClBD,EAAOH,EAAKK,SAASF,GAAQG,cAAcN,EAAKC,WAC/C,oDAIHK,cAAcf,KAAKU,uDAInB,IAAIM,GACDC,KAAKC,MAAM,IAAID,KAAK,sBAAsBE,eACzCF,KAAKC,OAAM,IAAID,MAAOE,gBACxB,IAGF,GAAIH,GAAQ,EAAG,OAAO,EAEtB,IAAMI,EAAW,CACff,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,IAAK,GAmBP,OAhBIQ,GAAQ,QAEVI,EAASf,KAAOgB,KAAKC,MAAMN,EAAO,OAClCA,GAAwB,MAAhBI,EAASf,MAEfW,GAAQ,OAEVI,EAASd,MAAQe,KAAKC,MAAMN,EAAO,MACnCA,GAAyB,KAAjBI,EAASd,OAEfU,GAAQ,KACVI,EAASb,IAAMc,KAAKC,MAAMN,EAAO,IACjCA,GAAuB,GAAfI,EAASb,KAEnBa,EAASZ,IAAMQ,EAERI,mCAIP,IAAMG,EAAYvB,KAAKI,MAEvB,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACE,EAAD,CACEC,MAAON,EAAUlB,KACjByB,KAAyB,IAAnBP,EAAUlB,KAAa,MAAQ,SAEvCmB,EAAAC,EAAAC,cAACE,EAAD,CAAcC,MAAON,EAAUjB,MAAOwB,KAAM,UAC5CN,EAAAC,EAAAC,cAACE,EAAD,CAAcC,MAAON,EAAUhB,IAAKuB,KAAM,QAC1CN,EAAAC,EAAAC,cAACE,EAAD,CAAcC,MAAON,EAAUf,IAAKsB,KAAM,gBAtE1BC,aA2ElBC,EAAe,SAAApC,GAQnB,OACE4B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBACdH,EAAAC,EAAAC,cAAA,cAVkB,SAAAO,GAEtB,IADAA,EAAQC,OAAOD,GACRA,EAAME,OAAS,GACpBF,EAAQ,IAAMA,EAEhB,OAAOA,EAKMG,CAAgBxC,EAAMiC,QAC/BL,EAAAC,EAAAC,cAAA,YAAO9B,EAAMkC,SAaNnC,4BCnFA0C,mLAdX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASW,IAAKC,IAAYC,IAAI,KAC7ChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,IAAIf,UAAU,aAAtB,sBAPQI,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.9edf6890.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nclass Countdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      days: 0,\r\n      hours: 0,\r\n      min: 0,\r\n      sec: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // update every second\r\n    this.interval = setInterval(() => {\r\n      const date = this.calculateCountdown();\r\n      date ? this.setState(date) : clearInterval(this.interval);\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  calculateCountdown() {\r\n    let diff =\r\n      (Date.parse(new Date(\"2019-8-24 00:00:00\").toUTCString()) -\r\n        Date.parse(new Date().toUTCString())) /\r\n      1000;\r\n\r\n    // clear countdown when date is reached\r\n    if (diff <= 0) return false;\r\n\r\n    const timeLeft = {\r\n      days: 0,\r\n      hours: 0,\r\n      min: 0,\r\n      sec: 0\r\n    };\r\n\r\n    if (diff >= 86400) {\r\n      // 24 * 60 * 60\r\n      timeLeft.days = Math.floor(diff / 86400);\r\n      diff -= timeLeft.days * 86400;\r\n    }\r\n    if (diff >= 3600) {\r\n      // 60 * 60\r\n      timeLeft.hours = Math.floor(diff / 3600);\r\n      diff -= timeLeft.hours * 3600;\r\n    }\r\n    if (diff >= 60) {\r\n      timeLeft.min = Math.floor(diff / 60);\r\n      diff -= timeLeft.min * 60;\r\n    }\r\n    timeLeft.sec = diff;\r\n\r\n    return timeLeft;\r\n  }\r\n\r\n  render() {\r\n    const countDown = this.state;\r\n\r\n    return (\r\n      <div className=\"Countdown\">\r\n        <CounterPlate\r\n          count={countDown.days}\r\n          name={countDown.days === 1 ? \"Day\" : \"Days\"}\r\n        />\r\n        <CounterPlate count={countDown.hours} name={\"Hours\"} />\r\n        <CounterPlate count={countDown.min} name={\"Min\"} />\r\n        <CounterPlate count={countDown.sec} name={\"Sec\"} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst CounterPlate = props => {\r\n  const addLeadingZeros = value => {\r\n    value = String(value);\r\n    while (value.length < 2) {\r\n      value = \"0\" + value;\r\n    }\r\n    return value;\r\n  };\r\n  return (\r\n    <span className=\"Countdown-col\">\r\n      <span className=\"Countdown-col-element\">\r\n        <strong>{addLeadingZeros(props.count)}</strong>\r\n        <span>{props.name}</span>\r\n      </span>\r\n    </span>\r\n  );\r\n};\r\n// Countdown.propTypes = {\r\n//   date: PropTypes.string.isRequired\r\n// };\r\n\r\n// Countdown.defaultProps = {\r\n//   date: new Date()\r\n// };\r\n\r\nexport default Countdown;\r\n","import React, { Component } from \"react\";\r\nimport Countdown from \"./Countdown\";\r\nimport \"./App.css\";\r\nimport background from \"./background.jpg\";\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <img className=\"bg-img\" src={background} alt=\"\" />\r\n        <div className=\"App-counter\">\r\n          <Countdown />\r\n          <a href=\"#\" className=\"round_btn\">\r\n            Subscribe\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/background.7fc796b9.jpg\";"],"sourceRoot":""}